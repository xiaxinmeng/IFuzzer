import contextlib
import copy
import inspect
import pickle
import sys
import types
import unittest
import warnings
from test import support
from test.support import import_helper
from test.support import warnings_helper
from test.support.script_helper import assert_python_ok
from _testcapi import awaitType as at
from _testcapi import awaitType as at
from _testcapi import awaitType as at
import test_coroutines

def test_badsyntax_1():
    samples = ['def foo():\n                await something()\n            ', 'await something()', 'async def foo():\n                yield from []\n            ', 'async def foo():\n                await await fut\n            ', 'async def foo(a=await something()):\n                pass\n            ', 'async def foo():\n                def bar():\n                 [i async for i in els]\n            ', 'async def foo():\n                def bar():\n                 [await i for i in els]\n            ', 'async def foo():\n                def bar():\n                 [i for i in els\n                    async for b in els]\n            ', 'async def foo():\n                def bar():\n                 [i for i in els\n                    for c in b\n                    async for b in els]\n            ', 'async def foo():\n                def bar():\n                 [i for i in els\n                    async for b in els\n                    for c in b]\n            ', 'async def foo():\n                def bar():\n                 [i for i in els\n                    for b in await els]\n            ', 'async def foo():\n                def bar():\n                 [i for i in els\n                    for b in els\n                        if await b]\n            ', 'async def foo():\n                def bar():\n                 [i for i in await els]\n            ', 'async def foo():\n                def bar():\n                 [i for i in els if await i]\n            ', 'def bar():\n                 [i async for i in els]\n            ', 'def bar():\n                 {i: i async for i in els}\n            ', 'def bar():\n                 {i async for i in els}\n            ', 'def bar():\n                 [await i for i in els]\n            ', 'def bar():\n                 [i for i in els\n                    async for b in els]\n            ', 'def bar():\n                 [i for i in els\n                    for c in b\n                    async for b in els]\n            ', 'def bar():\n                 [i for i in els\n                    async for b in els\n                    for c in b]\n            ', 'def bar():\n                 [i for i in els\n                    for b in await els]\n            ', 'def bar():\n                 [i for i in els\n                    for b in els\n                        if await b]\n            ', 'def bar():\n                 [i for i in await els]\n            ', 'def bar():\n                 [i for i in els if await i]\n            ', 'async def foo():\n                await\n            ', 'async def foo():\n                   def bar(): pass\n                   await = 1\n            ', 'async def foo():\n\n                   def bar(): pass\n                   await = 1\n            ', 'async def foo():\n                   def bar(): pass\n                   if 1:\n                       await = 1\n            ', 'def foo():\n                   async def bar(): pass\n                   if 1:\n                       await a\n            ', 'def foo():\n                   async def bar(): pass\n                   await a\n            ', 'def foo():\n                   def baz(): pass\n                   async def bar(): pass\n                   await a\n            ', 'def foo():\n                   def baz(): pass\n                   # 456\n                   async def bar(): pass\n                   # 123\n                   await a\n            ', 'async def foo():\n                   def baz(): pass\n                   # 456\n                   async def bar(): pass\n                   # 123\n                   await = 2\n            ', 'def foo():\n\n                   def baz(): pass\n\n                   async def bar(): pass\n\n                   await a\n            ', 'async def foo():\n\n                   def baz(): pass\n\n                   async def bar(): pass\n\n                   await = 2\n            ', 'async def foo():\n                   def async(): pass\n            ', 'async def foo():\n                   def await(): pass\n            ', 'async def foo():\n                   def bar():\n                       await\n            ', 'async def foo():\n                   return lambda async: await\n            ', 'async def foo():\n                   return lambda a: await\n            ', 'await a()', 'async def foo(a=await b):\n                   pass\n            ', 'def baz():\n                   async def foo(a=await b):\n                       pass\n            ', 'async def foo(async):\n                   pass\n            ', 'async def foo():\n                   def bar():\n                        def baz():\n                            async = 1\n            ', 'async def foo():\n                   def bar():\n                        def baz():\n                            pass\n                        async = 1\n            ', 'def foo():\n                   async def bar():\n\n                        async def baz():\n                            pass\n\n                        def baz():\n                            42\n\n                        async = 1\n            ', 'async def foo():\n                   def bar():\n                        def baz():\n                            pass\nawait foo()\n            ', 'def foo():\n                   def bar():\n                        async def baz():\n                            pass\nawait foo()\n            ', 'async def foo(await):\n                   pass\n            ', 'def foo():\n\n                   async def bar(): pass\n\n                   await a\n            ', 'def foo():\n                   async def bar():\n                        pass\nawait a\n            ', 'def foo():\n                   async for i in arange(2):\n                       pass\n            ', 'def foo():\n                   async with resource:\n                       pass\n            ', 'async with resource:\n                   pass\n            ', 'async for i in arange(2):\n                   pass\n            ']
    for code in samples:
        with AsyncBadSyntaxTest.subTest(code=code), AsyncBadSyntaxTest.assertRaises(SyntaxError):
            compile(code, '<test>', 'exec')

AsyncBadSyntaxTest = test_coroutines.AsyncBadSyntaxTest()
test_badsyntax_1()
